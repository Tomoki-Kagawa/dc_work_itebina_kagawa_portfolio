<?php
/*
*ログインページ
商品説明欄が追加され、商品の特徴を適切に伝えられている点は良いですね。
各提出物を可能な限り精査いたしましたので、気づいた点を以下にご報告いたします。
本日は、実装されたサイトの運用テストを通じて判明した事項をお伝えいたします。

以下の①～⑦（または①～⑥）にご対応ください。

１．ドキュメント資料　ページ一覧.xlsx

リクエスト先のURLが正しくない。以下は例です。他のURLも正しいかを確認してください。

（例）
https://portfolio02.dc-itex.com/ebina/0003/final/top.php

↓

https://portfolio02.dc-itex.com/ebina/0003/ec_site/index.php

２．【ログインページ】管理者ログインのリダイレクト先誤り

管理者「ec_admin」でログインしたとき、商品管理ページにリダイレクトされずに商品一覧へリダイレクトされます

３．【商品管理ページ】会員利用者がアクセスできてしまう。

会員利用者でログインしたときでも、商品管理ページのURLへリクエストすると、商品一覧ページへリダイレクトされず、そのまま商品管理ページへアクセスできてしまいます。（一般利用者が商品管理ページにアクセスするのはセキュリティ上の問題があります。）

４．【商品管理ページ】バリデーションの不備

商品管理ページにおいて、サーバー側の商品登録のバリデーション処理が適切でありません。

商品登録時に、「価格」の欄へ「120.5」などの小数値の入力を許されてしまっている。
→登録不可、0以上の整数の入力を促すエラーメッセージを表示

商品登録時に、「価格」の欄へ「-120」などのマイナスの数の入力を許されてしまっている。
→登録不可、0以上の整数の入力を促すエラーメッセージを表示

商品登録時に、「価格」の欄へ「price」などの数値以外の入力を許されてしまっている。
→登録不可、0以上の整数の入力を促すエラーメッセージを表示

商品登録時に、「在庫数」の欄へ「20.5」などの小数値の入力を許されてしまっている。
→登録不可、0以上の整数の入力を促すエラーメッセージを表示

商品登録時に、「在庫数」の欄へ「-20」などのマイナスの値の入力を許されてしまっている。
→登録不可、0以上の整数の入力を促すエラーメッセージを表示

商品登録時に、「在庫数」の欄へ「stock」などの数値以外の入力を許されてしまっている。
→登録不可、0以上の整数の入力を促すエラーメッセージを表示

その他

５．サーバー側のバリデーションだけでなく、ユーザー入力補助のため、jsを使ったフロントエンド側のバリデーションが２重にあることが望ましいでしょう。

６．view.phpに記述しているスタイルシートの内容は、外部CSSから読みこませてください。

７．モデルとビューがそれぞれ１ファイルにまとまっています。本来のMVC学習や「運用・保守を意識した設計」を目的とするなら、ページ毎（機能毎）にファイルを切り出した方がよいでしょう。

上記の７に関しては、短期学習課題として「とにかく動くものを作る」ことを目的とする場合、修正は必須ではありません。ただし、プログラミングの世界へ進むことを目指すのであれば、ファイル構造自体を見直すことをおすすめします。

以下は見本のファイル構造です。ご参考ください。

【見本のファイル構成】

以下のファイル、フォルダの名称や構造は見本です。
要件を満たしていれば問題はありません。

① ログインページ: login.php
② ユーザー登録ページ: register.php or signup.php
③ 商品管理ページ（管理者権限）: product_management.php
④ 商品一覧ページ（一般ユーザ権限）: catalog.php
⑤ ショッピングカートページ（一般ユーザ権限）: cart.php
⑥ 購入完了ページ（一般ユーザ権限）: purchase_complete.php

office_name
    ├───0001
        ├───htdocs
        │   ├───ec_site
        │       ├───login.php
        │       ├───signup.php
        │       ├───product_management.php
        │       ├───catalog.php
        │       ├───cart.php
        │       ├───purchase_complete.php
        │       ├───assets
        │           ├───style.css
        │           ├───script.js   
        │           ├───products   
        │               └───.....jpeg  # 商品画像のアップロード先
        ├───include
        │   ├───config
        │   │   └───const.php
        │   ├───model
        │   │   ├───login_model.php
        │   │   ├───signup_model.php
        │   │   ├───product_management_model.php
        │   │   ├───catalog_model.php
        │   │   ├───cart_model.php
        │   │   └───purchase_complete_model.php
        │   ├───view
        │   │   ├───login_view.php
        │   │   ├───signup_view.php
        │   │   ├───product_management_view.php
        │   │   ├───catalog_view.php
        │   │   ├───cart_view.php
        │   │   ├───purchase_complete_view.php
        │   │   ├───header.php
        │   │   └───footer.php
        │   ├───utility
        │   │   ├───common_utilities.php
        │   │   ├───database_functions.php
        │   │   ├───session_management.php
/htdocs/ec_site/ディレクトリは、Webアプリケーションのエントリーポイントとなる場所です。このディレクトリには、各機能やページに対応するコントローラーファイルが格納されています。また、静的なリソース（style.css, script.jsなど）もこのディレクトリ内に配置されています。

modelディレクトリ: 個々のビジネスロジックやデータベース操作（CRUD操作など）を行う関数やクラスをこのディレクトリに配置します。ModelはConfigで定義したデータベース接続を利用して、具体的なデータ操作を行います。

viewディレクトリ: Webページの表示に関わるHTMLとPHPのコードが格納されます。具体的には、データの表示形式やレイアウトを定義するテンプレートがこのディレクトリ内に存在します。Modelから取得したデータを、ユーザーが見やすい形に整形して表示する役割を担っています。

utilityディレクトリ: 一方で、データベースへの接続がアプリケーション全体で共通の関数や設定によって行われる場合は、そのようなコードをutilityディレクトリに配置することが一般的です。これは特にシングルトンパターンやファクトリーメソッドを用いて一度のデータベース接続を多用する場合に便利です。

configディレクトリ: また、一部のアプリケーションでは、データベース接続の設定だけを別のconfigディレクトリに保存します。この方法は、設定を一元管理したい場合に有用です。

なお、以下Gitレポジトリにつきまして、アクセスを試みましたが、ご招待をいただいていない可能性があります。（Jsのレポジトリはご招待いただいています。）
dc_work_itebina_kagawa_PHP

お手数ではございますが、上記レポジトリについて再度ご案内いただきますようお願い申し上げます。

上記対応いただけたら再度お知らせください。
次回は、ソースファイルを中心にレビューをする予定です。

どうぞよろしくお願い申し上げます。
*/
//一時バッファー
ob_start();
//Sessionスタート
session_start();
// Constファイル読み込み
require_once '../../include/config/const.php';
// Modelファイル読み込み
require_once '../../include/model/model.php';
// Viewファイル読み込み
include_once '../../include/view/view.php';
//ログイン時のセッション管理
loginManegement();
//データベース接続
$db=dbConnection($db_dsn,$db_login_user,$db_password);
headerDisplay($db);
errorDisplay();
loginDisplay($db);
// バッファー終了
ob_end_flush();